#!/bin/bash

#
# Copyright TE-FOOD International GmbH., All Rights Reserved
#

# region: load .env if any

[[ -f .env ]] && source .env

# endregion: .env
# region: base paths

# get them from .env 
export WMS_PATH_BASE=$WMS_PATH_BASE
export WMS_PATH_RC=$WMS_PATH_RC

# dirs under base
export WMS_PATH_BIN=${WMS_PATH_BASE}/bin
export WMS_PATH_SCRIPTS=${WMS_PATH_BASE}/scripts
export WMS_PATH_TEMPLATES=${WMS_PATH_BASE}/templates
export WMS_PATH_LOCALWORKBENCH=${WMS_PATH_BASE}/workbench

# wms independent common functions
export WMS_PATH_COMMON=${WMS_PATH_SCRIPTS}/common.sh

# add scripts and bins to PATH
export PATH=${WMS_PATH_BIN}:${WMS_PATH_SCRIPTS}:$PATH

# dirs under workbench
export WMS_PATH_WORKBENCH=/srv/TExWMS
export WMS_PATH_STACKS=${WMS_PATH_WORKBENCH}/stacks
# export WMS_PATH_REGISTRY=${WMS_PATH_WORKBENCH}/registry
# export WMS_PATH_DB=${WMS_PATH_WORKBENCH}/db

# endregion: base paths
# region: exec control

export WMS_EXEC_DRY=false
export WMS_EXEC_FORCE=$WMS_EXEC_FORCE
export WMS_EXEC_SURE=$WMS_EXEC_SURE
export WMS_EXEC_PANIC=true
export WMS_EXEC_SILENT=false
export WMS_EXEC_VERBOSE=true

# endregion: exec contorl
# region: versions and deps

export WMS_DEPS_BINS=('docker' 'docker-compose' 'jq' 'go' 'gum')

export WMS_DEPS_DB=mariadb:10.11.5
export WMS_DEPS_ADMINER=adminer:4.8.1
export WMS_DEPS_CDC=zendesk/maxwell:v1.40.5
export WMS_DEPS_MQ=rabbitmq:3.12.6-management-alpine
export WMS_DEPS_GO=golang:1.21.3

# endregion: versions and deps
# region: docker

export WMS_DOCKER_DELAY=10
export WMS_DOCKER_NET=wms
export WMS_DOCKER_GW=10.96.0.1
export WMS_DOCKER_INIT="--attachable --driver bridge --subnet 10.96.0.0/24 --gateway $WMS_DOCKER_GW $WMS_DOCKER_NET"
export WMS_DOCKER_DOMAIN=test.te-food.com
export WMS_DOCKER_REGISTRY_PORT=6000
export WMS_DOCKER_REGISTRY_HOST=localhost
export WMS_DOCKER_STACKS=$WMS_PATH_STACKS

# endregion: docker
# region: stacks

# region: registry 

export WMS_STACK1_NAME=registry
export WMS_STACK1_IMG=registry:2
export WMS_STACK1_CFG=${WMS_DOCKER_STACKS}/${WMS_STACK1_NAME}.yaml
export WMS_STACK1_FQDN=${WMS_STACK1_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK1_PORT=$WMS_DOCKER_REGISTRY_PORT
export WMS_STACK1_DATA=${WMS_PATH_WORKBENCH}/${WMS_STACK1_NAME}
export WMS_STACK1_REPO=${WMS_PATH_WORKBENCH}/${WMS_STACK1_NAME}/docker.tgz
export WMS_STACK1_IMAGES=("$WMS_DEPS_DB" "$WMS_DEPS_ADMINER" "$WMS_DEPS_CDC" "$WMS_DEPS_MQ" "$WMS_DEPS_GO")

# endregion: registry
# region: db

export WMS_STACK2_NAME=db
export WMS_STACK2_DATA=${WMS_PATH_WORKBENCH}/${WMS_STACK2_NAME}
export WMS_STACK2_CFG=${WMS_DOCKER_STACKS}/${WMS_STACK2_NAME}.yaml

export WMS_STACK2_S1_NAME=db
export WMS_STACK2_S1_IMG=${WMS_DOCKER_REGISTRY_HOST}:${WMS_DOCKER_REGISTRY_PORT}/${WMS_DOCKER_NET}-${WMS_DEPS_DB}
export WMS_STACK2_S1_FQDN=${WMS_STACK2_S1_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK2_S1_CONF=${WMS_STACK2_DATA}/etc
export WMS_STACK2_S1_DATA=${WMS_STACK2_DATA}/data
export WMS_STACK2_S1_INIT=${WMS_STACK2_DATA}/init
export WMS_STACK2_S1_ROOTPW=$WMS_STACK2_S1_ROOTPW
export WMS_STACK2_S1_PORT=3306

export WMS_STACK2_S2_NAME=adminer
export WMS_STACK2_S2_IMG=${WMS_DOCKER_REGISTRY_HOST}:${WMS_DOCKER_REGISTRY_PORT}/${WMS_DOCKER_NET}-${WMS_DEPS_ADMINER}
export WMS_STACK2_S2_FQDN=${WMS_STACK2_S2_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK2_S2_PORT=8200


# endregion: db
# region: mq

export WMS_STACK3_NAME=mq
export WMS_STACK3_CFG=${WMS_DOCKER_STACKS}/${WMS_STACK3_NAME}.yaml
export WMS_STACK3_DATA=${WMS_PATH_WORKBENCH}/${WMS_STACK3_NAME}

export WMS_STACK3_S1_NAME=mq
export WMS_STACK3_S1_FQDN=${WMS_STACK3_S1_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK3_S1_IMG=${WMS_DOCKER_REGISTRY_HOST}:${WMS_DOCKER_REGISTRY_PORT}/${WMS_DOCKER_NET}-${WMS_DEPS_MQ}
export WMS_STACK3_S1_CONF=${WMS_STACK3_DATA}/etc
export WMS_STACK3_S1_DATA=${WMS_STACK3_DATA}/data
export WMS_STACK3_S1_USER=$WMS_STACK3_S1_USER
export WMS_STACK3_S1_PW=$WMS_STACK3_S1_PW
export WMS_STACK3_S1_PORT_MQ=5672
export WMS_STACK3_S1_PORT_MGMT=8300

# endregion: mq
# region: cdc

export WMS_STACK4_NAME=cdc
export WMS_STACK4_CFG=${WMS_DOCKER_STACKS}/${WMS_STACK4_NAME}.yaml

# region: zendesk/maxwell

export WMS_STACK4_S1_NAME=maxwell
export WMS_STACK4_S1_FQDN=${WMS_STACK4_S1_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK4_S1_IMG=${WMS_DOCKER_REGISTRY_HOST}:${WMS_DOCKER_REGISTRY_PORT}/${WMS_DOCKER_NET}-${WMS_DEPS_CDC}
export WMS_STACK4_S1_CONF=${WMS_PATH_WORKBENCH}/${WMS_STACK4_NAME}/${WMS_STACK4_S1_NAME}/config.properties

export WMS_STACK4_S1_CONF_PREFIX=WMS_STACK4_S1_CONF_
export WMS_STACK4_S1_CONF_LOG_LEVEL=INFO
export WMS_STACK4_S1_CONF_HTTP_CONFIG=true
export WMS_STACK4_S1_CONF_HOST=$WMS_STACK2_S1_FQDN
export WMS_STACK4_S1_CONF_PORT=$WMS_STACK2_S1_PORT
export WMS_STACK4_S1_CONF_USER=$WMS_STACK4_S1_USER
export WMS_STACK4_S1_CONF_PASSWORD=$WMS_STACK4_S1_PW
export WMS_STACK4_S1_CONF_PRODUCER=rabbitmq
export WMS_STACK4_S1_CONF_RABBITMQ_HOST=${WMS_STACK3_S1_FQDN}
export WMS_STACK4_S1_CONF_RABBITMQ_PORT=${WMS_STACK3_S1_PORT_MQ}
export WMS_STACK4_S1_CONF_RABBITMQ_USER=${WMS_STACK3_S1_USER}
export WMS_STACK4_S1_CONF_RABBITMQ_PASS=${WMS_STACK3_S1_PW}
export WMS_STACK4_S1_CONF_RABBITMQ_VIRTUAL_HOST=/
export WMS_STACK4_S1_CONF_RABBITMQ_HANDSHAKE_TIMEOUT=20000
export WMS_STACK4_S1_CONF_RABBITMQ_DECLARE_EXCHANGE=true
export WMS_STACK4_S1_CONF_RABBITMQ_EXCHANGE=${WMS_DOCKER_NET}-${WMS_STACK4_S1_NAME}
export WMS_STACK4_S1_CONF_RABBITMQ_EXCHANGE_TYPE=fanout
export WMS_STACK4_S1_CONF_RABBITMQ_EXCHANGE_DURABLE=true
export WMS_STACK4_S1_CONF_RABBITMQ_EXCHANGE_AUTODELETE=false
export WMS_STACK4_S1_CONF_RABBITMQ_MESSAGE_PERSISTENT=false
export WMS_STACK4_S1_CONF_RABBITMQ_ROUTING_KEY_TEMPLATE="%db%.%table%"

# endregion: maxwell
# region: broker

export WMS_STACK4_S2_NAME=broker
export WMS_STACK4_S2_SRC=${WMS_PATH_BASE}/cdc-broker
export WMS_STACK4_S2_FQDN=${WMS_STACK4_S2_NAME}.${WMS_DOCKER_DOMAIN}
export WMS_STACK4_S2_IMG=${WMS_DOCKER_REGISTRY_HOST}:${WMS_DOCKER_REGISTRY_PORT}/${WMS_DOCKER_NET}-${WMS_DEPS_GO}

export WMS_STACK4_S2_CONF_CDC_EXCHANGE=$WMS_STACK4_S1_CONF_RABBITMQ_EXCHANGE
export WMS_STACK4_S2_CONF_CDC_QUEUE=${WMS_DOCKER_NET}-${WMS_STACK4_S2_NAME}
export WMS_STACK4_S2_CONF_CDC_ROUTING=
export WMS_STACK4_S2_CONF_CTRL_EXCHANGE="TBD"
export WMS_STACK4_S2_CONF_CTRL_QUEUE=$WMS_STACK4_S2_CONF_CDC_QUEUE
export WMS_STACK4_S2_CONF_CTRL_ROUTING=$WMS_STACK4_S2_CONF_CDC_QUEUE
export WMS_STACK4_S2_CONF_LOGLEVEL=6
export WMS_STACK4_S2_CONF_MQ_HOST=localhost
export WMS_STACK4_S2_CONF_MQ_PORT=$WMS_STACK3_S1_PORT_MQ
export WMS_STACK4_S2_CONF_MQ_PW=$WMS_STACK3_S1_PW
export WMS_STACK4_S2_CONF_MQ_USER=$WMS_STACK3_S1_USER

# endregion: broker

# endregion: cdc
# region: mgmt and metrics

	# region: COMMON2

	# export TC_COMMON2_STACK=metrics
	# export TC_COMMOM2_DATA=${TC_PATH_WORKBENCH_COMMON}
	# export TC_COMMON2_UID=$( id -u )
	# export TC_COMMON2_GID=$( id -g )
	
	# export TC_COMMON2_S1_NAME=visualizer

	# export TC_COMMON2_S1_PORT=5021
	# export TC_COMMON2_S2_NAME=logspout
	# export TC_COMMON2_S2_PORT=5022

	# export TC_COMMON2_S3_NAME=prometheus
	# export TC_COMMON2_S3_DATA=${TC_COMMOM2_DATA}/${TC_COMMON2_S3_NAME}
	# export TC_COMMON2_S3_PORT=5023
	# export TC_COMMON2_S3_WORKER=${TC_SWARM_MANAGER1[node]}
	# export TC_COMMON2_S3_PW=$TC_COMMON2_S3_PW

	# export TC_COMMON2_S4_NAME=cadvisor
	# export TC_COMMON2_S4_PORT=5024
	# export TC_COMMON2_S4_WORKER=${TC_SWARM_MANAGER1[node]}

	# export TC_COMMON2_S5_NAME=node-exporter
	# export TC_COMMON2_S5_PORT=5025
	# export TC_COMMON2_S5_WORKER=${TC_SWARM_MANAGER1[node]}

	# export TC_COMMON2_S6_NAME=grafana
	# export TC_COMMON2_S6_PORT=5026
	# export TC_COMMON2_S6_WORKER=${TC_SWARM_MANAGER1[node]}
	# export TC_COMMON2_S6_DATA=${TC_COMMOM2_DATA}/${TC_COMMON2_S6_NAME}
	# export TC_COMMON2_S6_PW=$TC_COMMON2_S6_PW
	# export TC_COMMON2_S6_INT=15

	# endregion: COMMON2
	# region: COMMON3

	# export TC_COMMON3_STACK=mgmt
	# export TC_COMMOM3_DATA=${TC_PATH_WORKBENCH_COMMON}
	# export TC_COMMON3_WORKER=${TC_SWARM_MANAGER1[node]}

	# export TC_COMMON3_S1_NAME=busybox
	# export TC_COMMON3_S1_WORKER=${TC_SWARM_MANAGER1[node]}

	# export TC_COMMON3_S2_NAME=netshoot
	# export TC_COMMON3_S2_WORKER=${TC_SWARM_MANAGER1[node]}

	# export TC_COMMON3_S3_NAME=portainer-agent

	# export TC_COMMON3_S4_NAME=portainer
	# export TC_COMMON3_S4_PORT=5034
	# export TC_COMMON3_S4_PW=$TC_COMMON3_S4_PW
	# export TC_COMMON3_S4_DATA=${TC_COMMOM3_DATA}/${TC_COMMON3_S4_NAME}

	# endregion: COMMON3

# endregion: mgmt and metrics

# endregion: stacks
# region: common funcs

export COMMON_FORCE=$WMS_EXEC_FORCE
export COMMON_PANIC=$WMS_EXEC_PANIC
export COMMON_PREREQS=("${WMS_DEPS_BINS[@]}")
export COMMON_SILENT=$WMS_EXEC_SILENT
export COMMON_VERBOSE=$WMS_EXEC_VERBOSE

[[ -f "$COMMON_FUNCS" ]] && source "$COMMON_FUNCS"
[[ -f "$WMS_PATH_COMMON" ]] && source "$WMS_PATH_COMMON"

# endregion: common funcs
# region: gum

# generic
export WMS_GUM_BOLD="#F0EE54"
export WMS_GUM_NORM="#00FA92"

#choose

export GUM_CHOOSE_TIMEOUT=0
export GUM_CHOOSE_CURSOR_FOREGROUND=$WMS_GUM_BOLD
export GUM_CHOOSE_HEADER_FOREGROUND=$WMS_GUM_BOLD
export GUM_CHOOSE_ITEM_FOREGROUND=$WMS_GUM_NORM
export GUM_CHOOSE_SELECTED_FOREGROUND=$WMS_GUM_BOLD
export GUM_CHOOSE_CURSOR=$COMMON_PREFIX

# confirm
export GUM_CONFIRM_TIMEOUT=0
export GUM_CONFIRM_PROMPT_FOREGROUND=$WMS_GUM_BOLD
export GUM_CONFIRM_SELECTED_FOREGROUND=$WMS_GUM_NORM
export GUM_CONFIRM_SELECTED_BACKGROUND=$WMS_GUM_BOLD
export GUM_CONFIRM_UNSELECTED_FOREGROUND=$WMS_GUM_NORM

# input
export GUM_INPUT_CURSOR_FOREGROUND=$WMS_GUM_BOLD
export GUM_INPUT_PROMPT_FOREGROUND=$WMS_GUM_BOLD
export GUM_INPUT_PLACEHOLDER="your input goes here..."
export GUM_INPUT_PROMPT=$COMMON_PREFIX
export GUM_INPUT_WIDTH=80

# spin
export GUM_SPIN_SPINNER=points
# export GUM_SPIN_SHOW_OUTPUT=true
export GUM_SPIN_ALIGN=left
export GUM_SPIN_SPINNER_WIDTH=$((${#COMMON_PREFIX} -1 ))
export GUM_SPIN_TIMEOUT=0
export GUM_SPIN_SPINNER_FOREGROUND=$WMS_GUM_BOLD
export GUM_SPIN_TITLE_FOREGROUND=$WMS_GUM_NORM
export GUM_SPIN_SPINNER_MARGIN="0 0"
export GUM_SPIN_SPINNER_PADDING="0 0"
export GUM_SPIN_TITLE_MARGIN="0 0"
export GUM_SPIN_TITLE_PADDING="0 0"

# style
export ALIGN=center
export BOLD=true
export BORDER=rounded
export BORDER_FOREGROUND=$WMS_GUM_BOLD
export FOREGROUND=$WMS_GUM_BOLD
export MARGIN="1 2"
export PADDING="2 4"
export UNDERLINE=true
export WIDTH=80

# endregion: gum
# region: load .env if any

[[ -f .env ]] && source .env

# endregion: .env
